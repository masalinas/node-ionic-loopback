swagger: '2.0'
info:
  version: 0.0.1
  title: node-ionic-loopback
basePath: /api
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
paths:
  /Stocks:
    post:
      tags:
        - Stock
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Stock.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    put:
      tags:
        - Stock
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Stock.upsert__put_Stocks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    patch:
      tags:
        - Stock
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Stock.upsert__patch_Stocks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    get:
      tags:
        - Stock
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Stock.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Stock'
      deprecated: false
  /Stocks/replaceOrCreate:
    post:
      tags:
        - Stock
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Stock.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  /Stocks/upsertWithWhere:
    post:
      tags:
        - Stock
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Stock.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  '/Stocks/{id}/exists':
    get:
      tags:
        - Stock
      summary: Check whether a model instance exists in the data source.
      operationId: 'Stock.exists__get_Stocks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Stocks/{id}':
    head:
      tags:
        - Stock
      summary: Check whether a model instance exists in the data source.
      operationId: 'Stock.exists__head_Stocks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Stock
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Stock.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    delete:
      tags:
        - Stock
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Stock.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Stock
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Stock.prototype.updateAttributes__put_Stocks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Stock'
        - name: id
          in: path
          description: Stock id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    patch:
      tags:
        - Stock
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Stock.prototype.updateAttributes__patch_Stocks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Stock'
        - name: id
          in: path
          description: Stock id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  '/Stocks/{id}/replace':
    post:
      tags:
        - Stock
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Stock.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  /Stocks/findOne:
    get:
      tags:
        - Stock
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Stock.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  /Stocks/update:
    post:
      tags:
        - Stock
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Stock.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
      deprecated: false
  /Stocks/count:
    get:
      tags:
        - Stock
      summary: Count instances of the model matched by where from the data source.
      operationId: Stock.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Stocks/change-stream:
    post:
      tags:
        - Stock
      summary: Create a change stream.
      operationId: Stock.createChangeStream__post_Stocks_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - Stock
      summary: Create a change stream.
      operationId: Stock.createChangeStream__get_Stocks_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
definitions:
  Stock:
    description: A Stock model
    properties:
      product:
        type: string
      quantity:
        type: number
        format: double
      date:
        type: string
        format: date
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - product
      - quantity
      - date
    additionalProperties: false
  x-any:
    properties: {}
  ObjectID:
    type: string
    pattern: "^[a-fA-F\\d]{24}$"
tags:
  - name: Stock
    description: A Stock model
